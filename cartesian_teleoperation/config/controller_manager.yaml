controller_manager:
  ros__parameters:
    update_rate: 100

    cartesian_compliance_controller:
      type: cartesian_compliance_controller/CartesianComplianceController

cartesian_compliance_controller:
  ros__parameters:

    # This is the tip of the robot tool that you usually use for your task.
    # For instance, it could be the drilling bit of a screwdriver or a grinding
    # tool.  When you specify a target_wrench, i.e. some additional forces that
    # your robot should apply to its environment, that target_wrench gets
    # applied in this frame.
    end_effector_link: "gripper_frame_link"

    # This is usually the link directly before the first actuated joint.  All
    # controllers will build a kinematic chain from this link up to
    # end_effector_link.  It's also the reference frame for the superposition
    # of error components in all controllers.
    robot_base_link: "base_link"

    # This is the URDF link of your sensor. Sensor signals are assumed to be
    # given in this frame.  It's important that this link is located somewhere
    # between end_effector_link and robot_base_link.  If that's not the case,
    # the controllers won't initialize and will emit an error message.
    ft_sensor_ref_link: "gripper_frame_link"

    # This is the link that the robot feels compliant about. It does not need
    # to coincide with the end_effector_link, but for many use cases, this
    # configuration is handy. When working with a screwdriver, for instance, 
    # setting compliance_ref_link == end_effector_link makes it easy to specify
    # downward pushing forces without generating unwanted offset moments.
    # On the other hand, an application could benefit from yielding a little in
    # the robot's wrist while drawing a line on a surface with a pen.
    compliance_ref_link: "gripper_link"

    joints:
      - shoulder_pan
      - shoulder_lift
      - elbow_flex
      - wrist_flex
      - wrist_roll

    # Choose between position or velocity.  In fact, the controllers allow to
    # set both at the same time, but not all drivers will support this.
    # In general, position control is a little smoother due to the double
    # time-integrated commands from the solver. If available on a robot, it
    # should be the default.  On some drivers, the velocity interface provides
    # faster control cycles, and hence could improve stability in
    # contact-dominated tasks.  A drawback is that we lose one time integration
    # step here and obtain noisier command signals in comparison to the
    # position interface.  It's probably suitable to test both on a new robot
    # and decide for what works best.
    command_interfaces:
      - position

    stiffness:  # w.r.t. compliance_ref_link coordinates
      trans_x: 5.0
      trans_y: 5.0
      trans_z: 5.0
      rot_x: 20.0
      rot_y: 20.0
      rot_z: 20.0

    solver:
      error_scale: 0.5
      iterations: 1
      publish_state_feedback: True

    # For all controllers, these gains are w.r.t. the robot_base_link coordinates.
    pd_gains:
      trans_x: {p: 0.0005, d: 0.0}
      trans_y: {p: 0.0005, d: 0.0}
      trans_z: {p: 0.0005, d: 0.0}
      rot_x: {p: 0.005}
      rot_y: {p: 0.005}
      rot_z: {p: 0.005}